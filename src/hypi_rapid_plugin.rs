// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputSequence {
    #[prost(oneof = "input_sequence::Value", tags = "1, 2, 3, 4, 5")]
    pub value: ::core::option::Option<input_sequence::Value>,
}
/// Nested message and enum types in `InputSequence`.
pub mod input_sequence {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        /// Indicates the start of a new sequence
        #[prost(message, tag = "1")]
        Step(super::StepEnvironment),
        /// Provides the next slice of the current sequence's payload. Only sent if requested by the plugin
        #[prost(message, tag = "2")]
        InputPayload(super::Payload),
        /// Sent to tell the plugin if it should send more of the output payload or not
        /// RAPID server rarely, if ever sends this since all plugin data should be sent back in the OutputMessage
        /// It will only accept a separate payload from the last step in a pipeline
        #[prost(message, tag = "3")]
        OutputPayloadAction(super::PayloadEvent),
        #[prost(message, tag = "4")]
        PermissionResponse(super::PermissionRes),
        /// Sent at the end of a sequence, the plugin should clear any internal state it had relating to the StepEnvironment it got as it will now be eligible to be called again with a new StepEnvironment
        #[prost(message, tag = "5")]
        End(super::End),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutputSequence {
    #[prost(oneof = "output_sequence::Value", tags = "1, 2, 3, 4, 5")]
    pub value: ::core::option::Option<output_sequence::Value>,
}
/// Nested message and enum types in `OutputSequence`.
pub mod output_sequence {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        /// The plugin's done, take this as its output. Only an End is valid input to the plugin after this
        #[prost(message, tag = "1")]
        Output(super::OutputMessage),
        /// Sent only IFF RAPID server requests payload
        #[prost(bytes, tag = "2")]
        OutputPayload(::prost::alloc::vec::Vec<u8>),
        /// Tell RAPID server more of the payload is needed...or to stop sending payload data
        #[prost(message, tag = "3")]
        InputPayloadAction(super::PayloadEvent),
        #[prost(message, tag = "4")]
        PermissionRequest(super::PermissionReq),
        #[prost(message, tag = "5")]
        Error(super::PluginError),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct End {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Payload {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "2")]
    pub is_end: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PayloadEvent {
    #[prost(enumeration = "PayloadAction", tag = "1")]
    pub action: i32,
    /// When the payload action triggers more data to be sent, do not send any more than this amount of data in bytes.
    /// If the plugin sends more than this to RAPID server, it may treat the plugin as hostile/broken and terminate it
    #[prost(uint32, tag = "2")]
    pub limit: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepEnvironment {
    /// The index of this step in the pipeline
    #[prost(int32, tag = "1")]
    pub step_index: i32,
    /// The number of steps available in this pipeline
    #[prost(int32, tag = "2")]
    pub total_steps: i32,
    /// The original message at the beginning of the pipeline
    #[prost(message, optional, tag = "3")]
    pub message: ::core::option::Option<InputMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputMessage {
    /// The ID of this message - globally unique and identifies this message specifically, even within the same pipeline
    /// It is different (and larger) than the urn.id
    #[prost(int64, tag = "1")]
    pub id: i64,
    /// The URN of the message. It is taken from the first message in the pipeline and passed to all steps
    #[prost(message, optional, tag = "2")]
    pub urn: ::core::option::Option<Urn>,
    /// List of headers for the message if any
    /// Can contain duplicates
    #[prost(message, repeated, tag = "3")]
    pub headers: ::prost::alloc::vec::Vec<Pair>,
    /// The set of fields that make up this message
    /// If you want to pass data from one step to another, use mappings to map the previous field's steps to fields of this step
    #[prost(message, repeated, tag = "4")]
    pub fields: ::prost::alloc::vec::Vec<Field>,
    /// Meta data that can container arbitrary key value pairs like protocol specific information e.g. for HTTP the method=POST,PUT,etc
    #[prost(message, repeated, tag = "5")]
    pub meta: ::prost::alloc::vec::Vec<Pair>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutputMessage {
    /// If provided AND this is the last message in the pipeline then this is used as the response status. For HTTP it becomes the HTTP response status
    #[prost(int32, optional, tag = "1")]
    pub status: ::core::option::Option<i32>,
    /// A set of headers that, if this is the last message in the pipeline will be used in the response headers (e.g. for HTTP)
    /// Note, these are cumulative, as in, all headers in the pipeline are merged and used in the response.
    /// The same header from a subsequent step, overrides an earlier step's header with the same name it DOES NOT combine to send the same header multiple times.
    #[prost(message, repeated, tag = "2")]
    pub headers: ::prost::alloc::vec::Vec<Pair>,
    /// A set of output fields from this plugin.
    /// A few special cases exist if this is the last message in the pipeline:
    /// 1. if the field's name is empty AND the value is a file, it sends the file's content to the client i.e. for HTTP it triggers a download of that file
    #[prost(message, repeated, tag = "3")]
    pub fields: ::prost::alloc::vec::Vec<Field>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Field {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "field::Value", tags = "2, 3, 4, 5, 6, 7, 8, 9, 10")]
    pub value: ::core::option::Option<field::Value>,
}
/// Nested message and enum types in `Field`.
pub mod field {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(int32, tag = "2")]
        I32(i32),
        #[prost(int64, tag = "3")]
        I64(i64),
        #[prost(float, tag = "4")]
        F32(f32),
        #[prost(double, tag = "5")]
        F64(f64),
        #[prost(int64, tag = "6")]
        Timestamp(i64),
        #[prost(bool, tag = "7")]
        Bool(bool),
        #[prost(string, tag = "8")]
        String(::prost::alloc::string::String),
        #[prost(bytes, tag = "9")]
        Bytes(::prost::alloc::vec::Vec<u8>),
        /// The path to the data uploaded for the field, NOT the data itself
        /// In HTTP, this would be the through a multipart request
        /// Another case is if the field's value exceeds the RAPID server file_threshold config
        #[prost(string, tag = "10")]
        File(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Urn {
    /// Globally unique ID identifying this message
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "4")]
    pub port: ::core::option::Option<i32>,
    #[prost(string, tag = "5")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub path_segments: ::prost::alloc::vec::Vec<Pair>,
    /// List of query string parameters, can be duplicates if the request contains duplicates
    #[prost(message, repeated, tag = "7")]
    pub query: ::prost::alloc::vec::Vec<Pair>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pair {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub value: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request to check if the actor (user or system) that started the sequence has the permissions requested
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PermissionReq {}
/// Answer to a permission request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PermissionRes {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginError {
    /// The status code for the error
    #[prost(int32, tag = "1")]
    pub status: i32,
    /// A textual status code for the error
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    /// Some error message
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    /// Key value pair providing any useful context to help debug the error, be sure not to return sensitive information here!
    #[prost(message, repeated, tag = "4")]
    pub context: ::prost::alloc::vec::Vec<Pair>,
}
/// Instruct RAPID server on what action to take next
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PayloadAction {
    /// Send the next part of the payload if available
    Send = 0,
    /// Don't send any more to the plugin, it will send a response back via the invoke
    Stop = 1,
}
impl PayloadAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PayloadAction::Send => "Send",
            PayloadAction::Stop => "Stop",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Send" => Some(Self::Send),
            "Stop" => Some(Self::Stop),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod plugin_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// A plugin is anything that implements this interface
    /// RAPID server will start/stop plugins as it deems necessary
    /// A plugin will be started with that files directory mounted so that the plugin can do whatever it wants to the files
    /// The plugin should ask RAPID if the user making the request has permission to perform the action before it does it
    #[derive(Debug, Clone)]
    pub struct PluginClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PluginClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PluginClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PluginClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            PluginClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// A sequence describes the set of actions that RAPID server or the plugin takes to arrive at an outcome when a message needs to be processed
        pub async fn sequence(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::InputSequence>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::OutputSequence>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/hypi_rapid_plugin.Plugin/sequence",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("hypi_rapid_plugin.Plugin", "sequence"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod plugin_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PluginServer.
    #[async_trait]
    pub trait Plugin: Send + Sync + 'static {
        /// Server streaming response type for the sequence method.
        type sequenceStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::OutputSequence, tonic::Status>,
            >
            + Send
            + 'static;
        /// A sequence describes the set of actions that RAPID server or the plugin takes to arrive at an outcome when a message needs to be processed
        async fn sequence(
            &self,
            request: tonic::Request<tonic::Streaming<super::InputSequence>>,
        ) -> std::result::Result<tonic::Response<Self::sequenceStream>, tonic::Status>;
    }
    /// A plugin is anything that implements this interface
    /// RAPID server will start/stop plugins as it deems necessary
    /// A plugin will be started with that files directory mounted so that the plugin can do whatever it wants to the files
    /// The plugin should ask RAPID if the user making the request has permission to perform the action before it does it
    #[derive(Debug)]
    pub struct PluginServer<T: Plugin> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Plugin> PluginServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PluginServer<T>
    where
        T: Plugin,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/hypi_rapid_plugin.Plugin/sequence" => {
                    #[allow(non_camel_case_types)]
                    struct sequenceSvc<T: Plugin>(pub Arc<T>);
                    impl<T: Plugin> tonic::server::StreamingService<super::InputSequence>
                    for sequenceSvc<T> {
                        type Response = super::OutputSequence;
                        type ResponseStream = T::sequenceStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::InputSequence>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Plugin>::sequence(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = sequenceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Plugin> Clone for PluginServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Plugin> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Plugin> tonic::server::NamedService for PluginServer<T> {
        const NAME: &'static str = "hypi_rapid_plugin.Plugin";
    }
}
